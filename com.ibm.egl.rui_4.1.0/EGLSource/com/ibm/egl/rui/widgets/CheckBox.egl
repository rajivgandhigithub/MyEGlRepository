/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2008, 2011. All Rights Reserved.
 *
 * U.S. Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA DP Schedule Contract with IBM Corp.
 */
package com.ibm.egl.rui.widgets;

Handler CheckBox type RUIWidget{targetWidget = span,
	@VEWidget{
		category = "Display and Input",
		template = "${typeName}{ text=\"CheckBox\", selected=true }",
		smallIcon = "icons/ctool16/checkbox.gif",
		largeIcon = "icons/ctool24/checkbox.gif"
	},
	@MVCView{
		retrieveViewHelper = getValueAsText,
		publishHelper = setValueAsText
	},  
	@VEDataTemplate{
		dataTemplates = [
			@DataTemplate{
				name = "CheckBox",
				dataMapping = @DataMapping {
					forArray = false,
					mappings = [MappingKind.TYPE_PRIMITIVE_BOOLEAN]
				},
				purposes = [PurposeKind.FOR_CREATE, PurposeKind.FOR_UPDATE],
				template = "${widgetName} ${typeName:com.ibm.egl.rui.widgets.CheckBox} { };"
			},
			@DataTemplate{
				name = "CheckBox (read only)",
				dataMapping = @DataMapping {
					forArray = false,
					mappings = [MappingKind.TYPE_PRIMITIVE_BOOLEAN]
				},
				purposes = [PurposeKind.FOR_DISPLAY, PurposeKind.FOR_UPDATE],
				template = "${widgetName} ${typeName:com.ibm.egl.rui.widgets.CheckBox} { disabled = true };"
			}
		]
	}}

	text String{@EGLProperty{setMethod = setText, getMethod = getText}, @VEProperty{}};
	selected boolean{@EGLProperty{setMethod = setSelected, getMethod = getSelected}, @VEProperty{}};
	private check Widget{tagName = "input type=checkbox", onKeyUp ::= key, onClick ::= click };
	private textspan Widget{tagName = "span" };
	private span Widget{tagName = "span", onClick ::= setFocus, children = [ check, textspan ]};
			
	function setText(textIn String in)
		text = textIn;
		textspan.innerHTML = textIn;
/*		if(this.getTextLayout() != null || this.getReverseTextDirection() != null)
			this.textspan.setBiDiMarkers(this.getTextLayout() == "Visual",this.getReverseTextDirection() == "Yes");
			if (this.getWidgetOrientation() == "RTL")
				textspan.innerHTML = 8235 + textspan.innerHTML;
			end
		end*/
	end
	
	function getText() returns (String)
		return (text);
	end
	
    function setFont( font String ) { @override }
        textspan.font = font;    
    end
	
	function setDisabled(disabled Boolean in){ @Override }
		check.disabled = disabled;
		span.disabled = disabled;
	end
	
	private function doSetSelected()
		browser String = RUILib.getUserAgent();
		if (Strlib.indexOf(browser, "MSIE 7.0") != 0)
			check.setAttribute("checked", "true");
		else
			check.setAttribute("checked", 1);
		end
	end

	private function doSetUnSelected()
    	check.setAttribute("checked", "");
        check.removeAttribute("checked");
    end

	function setSelected(selected Boolean in)
        if (!selected)
        	doSetUnSelected();// Update the DOM immediately.
            new Job { runFunction = doSetUnSelected }.schedule();//fix for IE problem
        else
        	doSetSelected();
            new Job { runFunction = doSetSelected }.schedule();
        end
    end
	
	function getSelected() returns (boolean)
		browser String = RUILib.getUserAgent();
		if (Strlib.indexOf(browser, "MSIE 7.0") != 0)
			return (check.getAttribute("checked") as boolean);
		else
			return (check.getAttribute("checked") as string == "true");
		end
	end

	function getWidgetOrientation() returns (String) { @Override }
		if(this.span.getAttribute("dir") as string == "rtl")
			return ("RTL");
		else 
			if(this.span.getAttribute("dir") as string == "ltr")
				return ("LTR");
			else
				return ("");				
			end
		end		
	end
	
	function setWidgetOrientation(widgetOrientation String in) { @Override }
		if(widgetOrientation == "RTL")
/*			if(this.getTextLayout() != "Visual")
				this.textspan.setAttribute("dir", "ltr");				
			end*/
			
			this.span.setAttribute("dir", "rtl");			
			this.span.style = "text-align: right;";
			this.textspan.setAttribute("dir", "rtl");
		else
			this.span.setAttribute("dir", "ltr");
			this.span.style = "text-align: left;";
			this.textspan.setAttribute("dir", "ltr");		
		end
		this.span.displayStyle = "inline-block";
		
	end
	
	function setTextLayout(textLayout String in) { @Override }	
		this.textspan.textLayout = textLayout;			
	end

	function getTextLayout() returns (String) { @Override }
		return (this.textspan.textLayout);
	end
	
	function setReverseTextDirection(reverseTextDirection String in) { @Override }
		this.textspan.reverseTextDirection = reverseTextDirection;	
	end
	
	function getReverseTextDirection() returns (String) { @Override }
		return (this.textspan.reverseTextDirection);
	end
	
	function setFocus(e Event in)
		check.focus();
	end
	
	private function click(e Event in)
		browser String = RUILib.getUserAgent();
		if (Strlib.indexOf(browser, "IE") != 0)
			e.widget = this;
			for (n int from 1 to onChange.getSize())
				onChange[n](e);
			end
			for (n int from 1 to onClick.getSize())
				onClick[n](e);
			end
		end
	end	
	
	private function key(e Event in)
		if (e.ch == 32) 
			browser String = RUILib.getUserAgent();
			if (Strlib.indexOf(browser, "IE") != 0)
				setSelected(!getSelected());
			end
			e.widget = this;
			for (n int from 1 to onChange.getSize())
				onChange[n](e);
			end
		end
	end
	
	private function setValueAsText(value String in)
		if("TRUE" == strlib.upperCase(value))
			setSelected (true);
		else
			setSelected(false);
		end 
	end
	
	private function getValueAsText() returns(String)
		if(getSelected())
			return("TRUE");
		else
			return("FALSE");
		end
	end
end
