/*
 * Licensed Materials - Property of IBM
 *
 * Copyright IBM Corporation 2008, 2011. All Rights Reserved.
 *
 * U.S. Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA DP Schedule Contract with IBM Corp.
 */
package com.ibm.egl.rui.widgets;

import com.ibm.egl.rui.history.HistoryHelper;

handler Combo type RUIWidget{tagName = "select",
	@VEWidget{
		category = "Display and Input",
		template = "${typeName}{ values = [\"Combo\"] }",
		smallIcon = "icons/ctool16/combo.gif",
		largeIcon = "icons/ctool24/combo.gif"
	},	
	@MVCView{
		retrieveViewHelper = getValueAsText,
		publishHelper = setValueAsText
	},
	@VEDataTemplate{
		dataTemplates = [
			@DataTemplate{
				name = "Combo",
				dataMapping = @DataMapping {
				forArray = false,
				mappings = [MappingKind.TYPE_PRIMITIVE_ALL]},
				purposes = [PurposeKind.FOR_DISPLAY, PurposeKind.FOR_CREATE, PurposeKind.FOR_UPDATE],
				template = "${widgetName} ${typeName:com.ibm.egl.rui.widgets.Combo} {};"
			}
		]
	}} 

	values String[] { @EGLProperty { getMethod=getValues, setMethod=setValues }, @VEProperty{} };
	selection Int {	@EGLProperty { getMethod=getSelection, setMethod=setSelection }, @VEProperty{} };
	private reverseTextDirectionThis String = "No";
	private textLayoutThis String = "Logical";
	
	private options Widget[0];
	
	function setValues(value string[] in)
		values = value;
		removeChildren();
		for(i int from 1 to options.getSize())
			UtilLib.destroyWidget(options[i]);
		end
		options.removeAll();
		for(index int from 1 to value.getSize() by 1)
			option Widget = new Widget{tagName = "option"};
			option.innerHTML = value[index];
			options.appendElement(option);
			appendChild(option);
		end
		setSelection(1);

		if(this.textLayoutThis == "Visual" || this.reverseTextDirectionThis == "Yes")		
			setBiDiMarkers();
		end

		if ( new HistoryHelper{}.isIE() && this.logicalParent isa Box )
			(this.logicalParent as Box).layout();
		end
	end
	
	function getValues() returns (string[])
		return (values);
	end
	
	function setSelection(selection int in)
		if (selection > 0 && selection <= options.getSize())
			options[selection].setAttribute("selected", "true");
		end
	end
	
	function getSelection() returns (int)
		return ((getAttribute("selectedIndex") as int) + 1);
	end
	
	function setTextLayout(textLayout String in) { @Override }
		this.textLayoutThis = textLayout;	
		setBiDiMarkers();
	end
	
	function getTextLayout() returns (String) { @Override }
		return (this.textLayoutThis);
	end

	function setReverseTextDirection(reverseTextDirection String in) { @Override }
		this.reverseTextDirectionThis = reverseTextDirection;			
		setBiDiMarkers();
	end
	
	function getReverseTextDirection() returns (String) { @Override }
		return (this.reverseTextDirectionThis);
	end
		
	private function setBiDiMarkers()
		isVisual boolean = this.textLayoutThis == "Visual";
		isReverseDirection boolean = this.reverseTextDirectionThis == "Yes";		
		for(index int from 1 to options.getSize() by 1)			
			options[index].setBiDiMarkers(isVisual,isReverseDirection);
		end
	end	
	
	private function setValueAsText(value String in)
		for(index int from 1 to values.getSize() by 1)
			if(value == values[index])
				setSelection(index);
				return;
			end
		end
		if(values.getSize()>0)
			setSelection(1);	
		end
	end
	
	private function getValueAsText() returns(String)
		return (values[getSelection()]);
	end
end
